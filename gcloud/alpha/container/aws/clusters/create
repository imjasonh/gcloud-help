NAME
    gcloud alpha container aws clusters create - create an Anthos cluster on
        AWS

SYNOPSIS
    gcloud alpha container aws clusters create (CLUSTER : --location=LOCATION)
        --aws-region=AWS_REGION --cluster-version=CLUSTER_VERSION
        --config-encryption-kms-key-arn=CONFIG_ENCRYPTION_KMS_KEY_ARN
        --database-encryption-kms-key-arn=DATABASE_ENCRYPTION_KMS_KEY_ARN
        --fleet-project=FLEET_PROJECT
        --iam-instance-profile=IAM_INSTANCE_PROFILE
        --pod-address-cidr-blocks=POD_ADDRESS_CIDR_BLOCKS --role-arn=ROLE_ARN
        --service-address-cidr-blocks=SERVICE_ADDRESS_CIDR_BLOCKS
        --subnet-ids=[SUBNET_ID,...] --vpc-id=VPC_ID
        [--admin-users=USER,[USER,...]] [--async]
        [--instance-type=INSTANCE_TYPE] [--main-volume-iops=MAIN_VOLUME_IOPS]
        [--main-volume-kms-key-arn=MAIN_VOLUME_KMS_KEY_ARN]
        [--main-volume-size=MAIN_VOLUME_SIZE]
        [--main-volume-type=MAIN_VOLUME_TYPE]
        [--role-session-name=ROLE_SESSION_NAME]
        [--root-volume-iops=ROOT_VOLUME_IOPS]
        [--root-volume-kms-key-arn=ROOT_VOLUME_KMS_KEY_ARN]
        [--root-volume-size=ROOT_VOLUME_SIZE]
        [--root-volume-type=ROOT_VOLUME_TYPE]
        [--security-group-ids=[SECURITY_GROUP_ID,...]]
        [--ssh-ec2-key-pair=SSH_EC2_KEY_PAIR] [--tags=TAG,[TAG,...]]
        [--validate-only]
        [--proxy-secret-arn=PROXY_SECRET_ARN
          --proxy-secret-version-id=PROXY_SECRET_VERSION_ID]
        [GCLOUD_WIDE_FLAG ...]

DESCRIPTION
    (ALPHA) Create an Anthos cluster on AWS.

EXAMPLES
    To create a cluster named my-cluster managed in location us-west1, run:

        $ gcloud alpha container aws clusters create my-cluster \
            --location=us-west1 --aws-region=AWS_REGION \
            --cluster-version=CLUSTER_VERSION \
            --database-encryption-kms-key-arn=KMS_KEY_ARN \
            --iam-instance-profile=IAM_INSTANCE_PROFILE \
            --pod-address-cidr-blocks=POD_ADDRESS_CIDR_BLOCKS \
            --role-arn=ROLE_ARN \
            --service-address-cidr-blocks=SERVICE_ADDRESS_CIDR_BLOCKS \
            --subnet-ids=SUBNET_ID --vpc-id=VPC_ID

POSITIONAL ARGUMENTS
     Cluster resource - cluster to create. The arguments in this group can be
     used to specify the attributes of this resource. (NOTE) Some attributes
     are not given arguments in this group but can be set in other ways. To set
     the project attribute:
      ◆ provide the argument cluster on the command line with a fully
        specified name;
      ◆ provide the argument --project on the command line;
      ◆ set the property core/project.

     This must be specified.

       CLUSTER
          ID of the cluster or fully qualified identifier for the cluster. To
          set the cluster attribute:
          ▸ provide the argument cluster on the command line.

          This positional must be specified if any of the other arguments in
          this group are specified.

       --location=LOCATION
          Google Cloud location for the cluster. To set the location attribute:
          ▸ provide the argument cluster on the command line with a fully
            specified name;
          ▸ provide the argument --location on the command line;
          ▸ set the property container_aws/location;
          ▸ set the property aws/location (deprecated).

REQUIRED FLAGS
     --aws-region=AWS_REGION
        AWS region to deploy the cluster.

     --cluster-version=CLUSTER_VERSION
        Kubernetes version to use for the cluster.

     --config-encryption-kms-key-arn=CONFIG_ENCRYPTION_KMS_KEY_ARN
        Amazon Resource Name (ARN) of the AWS KMS key to encrypt the user data.

     --database-encryption-kms-key-arn=DATABASE_ENCRYPTION_KMS_KEY_ARN
        Amazon Resource Name (ARN) of the AWS KMS key to encrypt the cluster
        secrets.

     --fleet-project=FLEET_PROJECT
        ID or number of the Fleet host project where the cluster is registered.

     --iam-instance-profile=IAM_INSTANCE_PROFILE
        Name of the IAM instance profile associated with the cluster.

     --pod-address-cidr-blocks=POD_ADDRESS_CIDR_BLOCKS
        IP address range for the pods in this cluster in CIDR notation (e.g.
        10.0.0.0/8). Can be any RFC 1918 IP range.

     --role-arn=ROLE_ARN
        Amazon Resource Name (ARN) of the IAM role to assume when managing AWS
        resources.

     --service-address-cidr-blocks=SERVICE_ADDRESS_CIDR_BLOCKS
        IP address range for the services IPs in CIDR notation (e.g.
        10.0.0.0/8). Can be any RFC 1918 IP range.

     --subnet-ids=[SUBNET_ID,...]
        Subnet ID of an existing VNET to use for the cluster control plane.

     --vpc-id=VPC_ID
        VPC associated with the cluster.

OPTIONAL FLAGS
     --admin-users=USER,[USER,...]
        Users that can perform operations as a cluster administrator. If not
        specified, the value of property core/account is used.

     --async
        Return immediately, without waiting for the operation in progress to
        complete.

     --instance-type=INSTANCE_TYPE
        AWS EC2 instance type.

     --main-volume-iops=MAIN_VOLUME_IOPS
        Number of I/O operations per second (IOPS) to provision for the main
        volume.

     --main-volume-kms-key-arn=MAIN_VOLUME_KMS_KEY_ARN
        Amazon Resource Name (ARN) of the AWS KMS key to encrypt the main
        volume.

     --main-volume-size=MAIN_VOLUME_SIZE
        Size of the main volume. The value must be a whole number followed by a
        size unit of GB for gigabyte, or TB for terabyte. If no size unit is
        specified, GB is assumed.

     --main-volume-type=MAIN_VOLUME_TYPE
        Type of the main volume. MAIN_VOLUME_TYPE must be one of: gp2, gp3.

     --role-session-name=ROLE_SESSION_NAME
        Identifier for the assumed role session.

     --root-volume-iops=ROOT_VOLUME_IOPS
        Number of I/O operations per second (IOPS) to provision for the root
        volume.

     --root-volume-kms-key-arn=ROOT_VOLUME_KMS_KEY_ARN
        Amazon Resource Name (ARN) of the AWS KMS key to encrypt the root
        control plane volume.

     --root-volume-size=ROOT_VOLUME_SIZE
        Size of the root volume. The value must be a whole number followed by a
        size unit of GB for gigabyte, or TB for terabyte. If no size unit is
        specified, GB is assumed.

     --root-volume-type=ROOT_VOLUME_TYPE
        Type of the root volume. ROOT_VOLUME_TYPE must be one of: gp2, gp3.

     --security-group-ids=[SECURITY_GROUP_ID,...]
        IDs of additional security groups to add to control plane replicas.

     --ssh-ec2-key-pair=SSH_EC2_KEY_PAIR
        Name of the EC2 key pair to log in into control plane nodes.

     --tags=TAG,[TAG,...]
        Applies the given tags (comma separated) on the cluster. Example:

            $ gcloud alpha container aws clusters create EXAMPLE_CLUSTER \
                --tags=tag1=one,tag2=two

     --validate-only
        Validate the cluster to create, but don't actually perform it.

     Proxy config

       --proxy-secret-arn=PROXY_SECRET_ARN
          ARN of the AWS Secrets Manager secret that contains a proxy
          configuration.

          This flag must be specified if any of the other arguments in this
          group are specified.

       --proxy-secret-version-id=PROXY_SECRET_VERSION_ID
          Version ID string of the AWS Secrets Manager secret that contains a
          proxy configuration.

          This flag must be specified if any of the other arguments in this
          group are specified.

GCLOUD WIDE FLAGS
    These flags are available to all commands: --access-token-file, --account,
    --billing-project, --configuration, --flags-file, --flatten, --format,
    --help, --impersonate-service-account, --log-http, --project, --quiet,
    --trace-token, --user-output-enabled, --verbosity.

    Run $ gcloud help for details.

NOTES
    This command is currently in alpha and might change without notice. If this
    command fails with API permission errors despite specifying the correct
    project, you might be trying to access an API with an invitation-only early
    access allowlist. This variant is also available:

        $ gcloud container aws clusters create

