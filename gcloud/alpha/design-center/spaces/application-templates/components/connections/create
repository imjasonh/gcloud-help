NAME
    gcloud alpha design-center spaces application-templates components
        connections create - create a connection

SYNOPSIS
    gcloud alpha design-center spaces application-templates components
        connections create (CONNECTION : --component=COMPONENT)
        --destination-component-uri=DESTINATION_COMPONENT_URI
        [--application-template=APPLICATION_TEMPLATE]
        [--destination-component-parameters=[key=KEY],[value=VALUE]]
        [--location=LOCATION]
        [--source-component-parameters=[key=KEY],[value=VALUE]] [--space=SPACE]
        [GCLOUD_WIDE_FLAG ...]

DESCRIPTION
    (ALPHA) Create a connection between components in an application template.

EXAMPLES
    To create the connection my-connection in component my-component of
    application template my-app-template, space my-space, project my-project
    and location us-central1 with a destination component other-component, run:

        $ gcloud alpha design-center spaces application-templates \
            components connections create my-connection \
            --component=my-component \
            --application-template=my-app-template --space=my-space \
            --project=my-project --location=us-central1 \
            --destination-component-uri=other-component

    Or run:

        $ gcloud alpha design-center spaces application-templates \
            components connections create my-connection \
            --component=my-component \
            --application-template=my-app-template --space=my-space \
            --project=my-project --location=us-central1 \
            --destination-component-uri=projects/my-project/locations/\
        us-central1/spaces/my-space/applicationTemplates/my-app-template/\
        components/other-component

    Or run:

        $ gcloud alpha design-center spaces application-templates \
            components connections create \
            projects/my-project/locations/us-central1/spaces/my-space/\
        applicationTemplates/my-app-template/components/my-component/\
        connections/my-connection \
            --destination-component-uri=projects/my-project/locations/\
        us-central1/spaces/my-space/applicationTemplates/my-app-template/\
        components/other-component

    To create the connection my-connection with a parameter key-value pair of
    type:connection-type in component my-component of application template
    my-app-template, space my-space, project my-project and location
    us-central1 with a destination component other-component, run the following
    shorthand example:

        $ gcloud alpha design-center spaces application-templates \
            components connections create my-connection \
            --component=my-component \
            --application-template=my-app-template --space=my-space \
            --project=my-project --location=us-central1 \
            --destination-component-uri=other-component \
            --parameters=key=type,value=connection-type

    Or run the following JSON example:

        $ gcloud alpha design-center spaces application-templates \
            components connections create my-connection \
            --component=my-component \
            --application-template=my-app-template --space=my-space \
            --project=my-project --location=us-central1 \
            --destination-component-uri=other-component \
            --parameters='[{"key": "type", "value": "connection-type"}]'

    Or create a YAML or JSON file with the parameters and run the following
    file example:

        $ gcloud alpha design-center spaces application-templates \
            components connections create my-connection \
            --component=my-component \
            --application-template=my-app-template --space=my-space \
            --project=my-project --location=us-central1 \
            --destination-component-uri=other-component \
            --parameters=my-parameters.yaml

POSITIONAL ARGUMENTS
     Connection resource - Identifier. The connection name. The arguments in
     this group can be used to specify the attributes of this resource. (NOTE)
     Some attributes are not given arguments in this group but can be set in
     other ways.

     To set the project attribute:
      ◆ provide the argument connection on the command line with a fully
        specified name;
      ◆ provide the argument --project on the command line;
      ◆ set the property core/project.

     To set the location attribute:
      ◆ provide the argument connection on the command line with a fully
        specified name;
      ◆ provide the argument --location on the command line.

     To set the space attribute:
      ◆ provide the argument connection on the command line with a fully
        specified name;
      ◆ provide the argument --space on the command line.

     To set the application-template attribute:
      ◆ provide the argument connection on the command line with a fully
        specified name;
      ◆ provide the argument --application-template on the command line.

     This must be specified.

       CONNECTION
          ID of the connection or fully qualified identifier for the
          connection.

          To set the connection attribute:
          ▸ provide the argument connection on the command line.

          This positional argument must be specified if any of the other
          arguments in this group are specified.

       --component=COMPONENT
          The component id of the connection resource.

          To set the component attribute:
          ▸ provide the argument connection on the command line with a fully
            specified name;
          ▸ provide the argument --component on the command line.

REQUIRED FLAGS
     Component resource - The destination component URI used to generate the
     connection. Format is
     projects/$project/locations/$location/spaces/$space/applicationTemplates/$application_template/components/$component
     This represents a Cloud resource. (NOTE) Some attributes are not given
     arguments in this group but can be set in other ways.

     To set the project attribute:
      ◆ provide the argument --destination-component-uri on the command line
        with a fully specified name;
      ◆ provide the argument --project on the command line;
      ◆ set the property core/project.

     To set the location attribute:
      ◆ provide the argument --destination-component-uri on the command line
        with a fully specified name;
      ◆ provide the argument --location on the command line.

     To set the space attribute:
      ◆ provide the argument --destination-component-uri on the command line
        with a fully specified name;
      ◆ provide the argument --space on the command line.

     To set the application-template attribute:
      ◆ provide the argument --destination-component-uri on the command line
        with a fully specified name;
      ◆ provide the argument --application-template on the command line.

     This must be specified.

       --destination-component-uri=DESTINATION_COMPONENT_URI
          ID of the component or fully qualified identifier for the component.

          To set the component attribute:
          ▸ provide the argument --destination-component-uri on the command
            line.

OPTIONAL FLAGS
     --application-template=APPLICATION_TEMPLATE
        For resources [connection, destination-component-uri], provides
        fallback value for resource application-template attribute. When the
        resource's full URI path is not provided, application-template will
        fallback to this flag value.

     --destination-component-parameters=[key=KEY],[value=VALUE]
        The parameters of the connection associated with the destination
        component.

         key
            The key of the parameter.

         value
            The value of the parameter.

        Shorthand Example:

            --destination-component-parameters=key=string,value={...} --destination-component-parameters=key=string,value={...}

        JSON Example:

            --destination-component-parameters='[{"key": "string", "value": {...}}]'

        File Example:

            --destination-component-parameters=path_to_file.(yaml|json)

     --location=LOCATION
        For resources [connection, destination-component-uri], provides
        fallback value for resource location attribute. When the resource's
        full URI path is not provided, location will fallback to this flag
        value.

     --source-component-parameters=[key=KEY],[value=VALUE]
        The parameters of the connection associated with the source component.

         key
            The key of the parameter.

         value
            The value of the parameter.

        Shorthand Example:

            --source-component-parameters=key=string,value={...} --source-component-parameters=key=string,value={...}

        JSON Example:

            --source-component-parameters='[{"key": "string", "value": {...}}]'

        File Example:

            --source-component-parameters=path_to_file.(yaml|json)

     --space=SPACE
        For resources [connection, destination-component-uri], provides
        fallback value for resource space attribute. When the resource's full
        URI path is not provided, space will fallback to this flag value.

GCLOUD WIDE FLAGS
    These flags are available to all commands: --access-token-file, --account,
    --billing-project, --configuration, --flags-file, --flatten, --format,
    --help, --impersonate-service-account, --log-http, --project, --quiet,
    --trace-token, --user-output-enabled, --verbosity.

    Run $ gcloud help for details.

API REFERENCE
    This command uses the designcenter/v1alpha API. The full documentation for
    this API can be found at:
    http://cloud.google.com/application-design-center/docs

NOTES
    This command is currently in alpha and might change without notice. If this
    command fails with API permission errors despite specifying the correct
    project, you might be trying to access an API with an invitation-only early
    access allowlist.

