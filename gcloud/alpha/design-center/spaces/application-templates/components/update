NAME
    gcloud alpha design-center spaces application-templates components update -
        update a component

SYNOPSIS
    gcloud alpha design-center spaces application-templates components update
        (COMPONENT : --application-template=APPLICATION_TEMPLATE
          --location=LOCATION --space=SPACE) [--display-name=DISPLAY_NAME]
        [--parameters=[key=KEY],[value=VALUE]
          | --add-parameters=[key=KEY],[value=VALUE] --clear-parameters
          | --remove-parameters=[key=KEY],[value=VALUE]] [GCLOUD_WIDE_FLAG ...]

DESCRIPTION
    (ALPHA) Update a component in an application template.

EXAMPLES
    To update the display name to My New Component Name in the component
    my-component in application template my-app-template, space my-space,
    project my-project and location us-central1, run:

        $ gcloud alpha design-center spaces application-templates \
            components update my-component \
            --application-template=my-app-template --space=my-space \
            --project=my-project --location=us-central1 \
            --display-name="My New Component Name"

    Or run:

        $ gcloud alpha design-center spaces application-templates \
            components update \
            projects/my-project/locations/us-central1/spaces/my-space/\
        applicationTemplates/my-app-template/components/my-component \
            --display-name="My New Component Name"

    To update the parameters with new key-value pairs of project_id:new-project
    and service_name:new-service for the component my-component in application
    template my-app-template, space my-space, project my-project and location
    us-central1, run the following shorthand example:

        $ gcloud alpha design-center spaces application-templates \
            components update my-component \
            --application-template=my-app-template --space=my-space \
            --project=my-project --location=us-central1 \
            --parameters=key=project_id,value=new-project \
            --add-parameters=key=service_name,value=new-service

    Or run the following JSON example:

        $ gcloud alpha design-center spaces application-templates \
            components update my-component \
            --application-template=my-app-template --space=my-space \
            --project=my-project --location=us-central1 \
            --parameters='[{"key": "project_id", "value": "new-project"},
         {"key": "service_name", "value": "new-service"}]'

    Or create a YAML or JSON file with the parameters and run the following
    file example:

        $ gcloud alpha design-center spaces application-templates \
            components update my-component \
            --application-template=my-app-template --space=my-space \
            --project=my-project --location=us-central1 \
            --parameters=my-parameters.yaml

    To add new parameters key-value pair of project_id:new-project and
    service_name:new-service to the component my-component in application
    template my-app-template, space my-space, project my-project and location
    us-central1, run the following shorthand example:

        $ gcloud alpha design-center spaces application-templates \
            components update my-component \
            --application-template=my-app-template --space=my-space \
            --project=my-project --location=us-central1 \
            --add-parameters=key=project_id,value=new-project \
            --add-parameters=key=service_name,value=new-service

    Or run the following JSON example:

        $ gcloud alpha design-center spaces application-templates \
            components update my-component \
            --application-template=my-app-template --space=my-space \
            --project=my-project --location=us-central1 \
            --add-parameters='[{"key": "project_id", "value":
         "new-project"}, {"key": "service_name", "value": "new-service"}]'

    Or create a YAML or JSON file with the parameters and run the following
    file example:

        $ gcloud alpha design-center spaces application-templates \
            components update my-component \
            --application-template=my-app-template --space=my-space \
            --project=my-project --location=us-central1 \
            --add-parameters=my-parameters.yaml

    To clear all parameters from the component my-component in application
    template my-app-template, space my-space, project my-project and location
    us-central1, run:

        $ gcloud alpha design-center spaces application-templates \
            components update my-component \
            --application-template=my-app-template --space=my-space \
            --project=my-project --location=us-central1 --clear-parameters

    To remove an existing parameter key-value pair of project_id:new-project
    from the component my-component in application template my-app-template,
    space my-space, project my-project and location us-central1, run:

        $ gcloud alpha design-center spaces application-templates \
            components update my-component \
            --application-template=my-app-template --space=my-space \
            --project=my-project --location=us-central1 \
            --remove-parameters=key=project_id,value=my-project

POSITIONAL ARGUMENTS
     Component resource - Identifier. The component name. The arguments in this
     group can be used to specify the attributes of this resource. (NOTE) Some
     attributes are not given arguments in this group but can be set in other
     ways.

     To set the project attribute:
      ◆ provide the argument component on the command line with a fully
        specified name;
      ◆ provide the argument --project on the command line;
      ◆ set the property core/project.

     This must be specified.

       COMPONENT
          ID of the component or fully qualified identifier for the component.

          To set the component attribute:
          ▸ provide the argument component on the command line.

          This positional argument must be specified if any of the other
          arguments in this group are specified.

       --application-template=APPLICATION_TEMPLATE
          The applicationTemplate id of the component resource.

          To set the application-template attribute:
          ▸ provide the argument component on the command line with a fully
            specified name;
          ▸ provide the argument --application-template on the command line.

       --location=LOCATION
          The location id of the component resource.

          To set the location attribute:
          ▸ provide the argument component on the command line with a fully
            specified name;
          ▸ provide the argument --location on the command line.

       --space=SPACE
          The space id of the component resource.

          To set the space attribute:
          ▸ provide the argument component on the command line with a fully
            specified name;
          ▸ provide the argument --space on the command line.

FLAGS
     --display-name=DISPLAY_NAME
        The component display name.

     Update parameters.

     At most one of these can be specified:

       --parameters=[key=KEY],[value=VALUE]
          Set parameters to new value. The component parameters.

           key
              The key of the parameter.

           value
              The value of the parameter.

          Shorthand Example:

              --parameters=key=string,value={...} --parameters=key=string,value={...}

          JSON Example:

              --parameters='[{"key": "string", "value": {...}}]'

          File Example:

              --parameters=path_to_file.(yaml|json)

       --add-parameters=[key=KEY],[value=VALUE]
          Add new value to parameters list. The component parameters.

           key
              The key of the parameter.

           value
              The value of the parameter.

          Shorthand Example:

              --add-parameters=key=string,value={...} --add-parameters=key=string,value={...}

          JSON Example:

              --add-parameters='[{"key": "string", "value": {...}}]'

          File Example:

              --add-parameters=path_to_file.(yaml|json)

       At most one of these can be specified:

         --clear-parameters
            Clear parameters value and set to empty list.

         --remove-parameters=[key=KEY],[value=VALUE]
            Remove existing value from parameters list. The component
            parameters.

             key
                The key of the parameter.

             value
                The value of the parameter.

            Shorthand Example:

                --remove-parameters=key=string,value={...} --remove-parameters=key=string,value={...}

            JSON Example:

                --remove-parameters='[{"key": "string", "value": {...}}]'

            File Example:

                --remove-parameters=path_to_file.(yaml|json)

GCLOUD WIDE FLAGS
    These flags are available to all commands: --access-token-file, --account,
    --billing-project, --configuration, --flags-file, --flatten, --format,
    --help, --impersonate-service-account, --log-http, --project, --quiet,
    --trace-token, --user-output-enabled, --verbosity.

    Run $ gcloud help for details.

API REFERENCE
    This command uses the designcenter/v1alpha API. The full documentation for
    this API can be found at:
    http://cloud.google.com/application-design-center/docs

NOTES
    This command is currently in alpha and might change without notice. If this
    command fails with API permission errors despite specifying the correct
    project, you might be trying to access an API with an invitation-only early
    access allowlist.

