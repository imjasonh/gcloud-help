NAME
    gcloud alpha scc custom-modules etd list-descendant - list the details of
        resident and descendant Event Threat Detection custom modules

SYNOPSIS
    gcloud alpha scc custom-modules etd list-descendant
        (--folder=FOLDER | --organization=ORGANIZATION | --project=PROJECT)
        [--filter=EXPRESSION] [--limit=LIMIT] [--page-size=PAGE_SIZE]
        [--sort-by=[FIELD,...]] [GCLOUD_WIDE_FLAG ...]

DESCRIPTION
    (ALPHA) List the details of the resident and descendant Event Threat
    Detection custom modules for a specified organization or folder. For a
    project, this command lists only the custom modules that are created in the
    project. Modules created in a parent organization or folder are excluded
    from the list. To list the resident custom modules and the modules that are
    inherited from a parent organization and folder, use gcloud scc
    custom-modules etd list.

EXAMPLES
    To list resident and descendant Event Threat Detection custom modules for
    organization 123, run:

        $ gcloud alpha scc custom-modules etd list-descendant \
            --organization=organizations/123

    To list resident and descendant Event Threat Detection custom modules for
    folder 456, run:

        $ gcloud alpha scc custom-modules etd list-descendant \
            --folder=folders/456

    To list resident and descendant Event Threat Detection custom modules for
    project 789, run:

        $ gcloud alpha scc custom-modules etd list-descendant \
            --project=projects/789

REQUIRED FLAGS
     Exactly one of these must be specified:

       --folder=FOLDER
          Folder for listing the Event Threat Detection custom modules created
          at the current folder level and its child resources. Formatted as
          folders/456 or just 456.

       --organization=ORGANIZATION
          Organization for listing the Event Threat Detection custom modules
          created at the organization level and its child resources. Formatted
          as organizations/123 or just 123.

       --project=PROJECT
          ID or number of the project for listing the Event Threat Detection
          custom modules at current project level. Formatted as projects/789 or
          just 789.

LIST COMMAND FLAGS
     --filter=EXPRESSION
        Apply a Boolean filter EXPRESSION to each resource item to be listed.
        If the expression evaluates True, then that item is listed. For more
        details and examples of filter expressions, run $ gcloud topic filters.
        This flag interacts with other flags that are applied in this order:
        --flatten, --sort-by, --filter, --limit.

     --limit=LIMIT
        Maximum number of resources to list. The default is unlimited. This
        flag interacts with other flags that are applied in this order:
        --flatten, --sort-by, --filter, --limit.

     --page-size=PAGE_SIZE
        Some services group resource list output into pages. This flag
        specifies the maximum number of resources per page. The default is
        determined by the service if it supports paging, otherwise it is
        unlimited (no paging). Paging may be applied before or after --filter
        and --limit depending on the service.

     --sort-by=[FIELD,...]
        Comma-separated list of resource field key names to sort by. The
        default order is ascending. Prefix a field with ``~'' for descending
        order on that field. This flag interacts with other flags that are
        applied in this order: --flatten, --sort-by, --filter, --limit.

GCLOUD WIDE FLAGS
    These flags are available to all commands: --access-token-file, --account,
    --billing-project, --configuration, --flags-file, --flatten, --format,
    --help, --impersonate-service-account, --log-http, --project, --quiet,
    --trace-token, --user-output-enabled, --verbosity.

    Run $ gcloud help for details.

API REFERENCE
    This command uses the securitycenter/v1 API. The full documentation for
    this API can be found at: https://cloud.google.com/security-command-center

NOTES
    This command is currently in alpha and might change without notice. If this
    command fails with API permission errors despite specifying the correct
    project, you might be trying to access an API with an invitation-only early
    access allowlist.

