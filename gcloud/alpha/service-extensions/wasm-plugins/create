NAME
    gcloud alpha service-extensions wasm-plugins create - create a WasmPlugin
        resource

SYNOPSIS
    gcloud alpha service-extensions wasm-plugins create
        (WASM_PLUGIN : --location=LOCATION) [--async]
        [--description=DESCRIPTION] [--labels=[KEY=VALUE,...]]
        [--log-config=[LOG_CONFIG,...]]
        [--image=IMAGE
          --main-version=MAIN_VERSION --plugin-config=PLUGIN_CONFIG
          | --plugin-config-file=PATH_TO_FILE
          | --plugin-config-uri=PLUGIN_CONFIG_URI] [GCLOUD_WIDE_FLAG ...]

DESCRIPTION
    (ALPHA) Create a new WasmPlugin resource.

EXAMPLES
    To create a WasmPlugin called my-plugin, together with a new version called
    v1, and set it as main, run:

        $ gcloud alpha service-extensions wasm-plugins create my-plugin \
            --main-version=v1 \
            --image=...-docker.pkg.dev/my-project/repository/container:tag

POSITIONAL ARGUMENTS
     WasmPlugin resource - The ID of the WasmPlugin resource to create. The
     arguments in this group can be used to specify the attributes of this
     resource. (NOTE) Some attributes are not given arguments in this group but
     can be set in other ways.

     To set the project attribute:
      ◆ provide the argument wasm_plugin on the command line with a fully
        specified name;
      ◆ provide the argument --project on the command line;
      ◆ set the property core/project.

     This must be specified.

       WASM_PLUGIN
          ID of the WasmPlugin or fully qualified identifier for the
          WasmPlugin.

          To set the wasm_plugin attribute:
          ▸ provide the argument wasm_plugin on the command line.

          This positional argument must be specified if any of the other
          arguments in this group are specified.

       --location=LOCATION
          The location ID.

          To set the location attribute:
          ▸ provide the argument wasm_plugin on the command line with a fully
            specified name;
          ▸ provide the argument --location on the command line;
          ▸ use global location.

FLAGS
     --async
        Return immediately, without waiting for the operation in progress to
        complete.

     --description=DESCRIPTION
        A human-readable description of the resource.

     --labels=[KEY=VALUE,...]
        List of label KEY=VALUE pairs to add.

        Keys must start with a lowercase character and contain only hyphens
        (-), underscores (_), lowercase characters, and numbers. Values must
        contain only hyphens (-), underscores (_), lowercase characters, and
        numbers.

     --log-config=[LOG_CONFIG,...]
        Logging options for the activity performed by this plugin. The
        following options can be set:
        ◆ enable: whether to enable logging. If log-config flag is set,
          enable option is required.

        ◆ sample-rate: configures the sampling rate of activity logs, where
          1.0 means all logged activity is reported and 0.0 means no activity
          is reported. The default value is 1.0, and the value of the field
          must be in range 0 to 1 (inclusive).

        ◆ min-log-level: specifies the lowest level of the logs that should
          be exported to Cloud Logging. The default value is INFO.

        Example usage:
        --log-config=enable=True,sample-rate=0.5,min-log-level=INFO
        --log_config=enable=False

     --image=IMAGE
        URI of the container image containing the plugin's Wasm module, stored
        in the Artifact Registry.

     --main-version=MAIN_VERSION
        ID of the WasmPluginVersion resource that will be created for that
        WasmPlugin and that will be set as the current main version.

     Configuration for the plugin, provided at runtime by the on_configure
     function (Rust Proxy-Wasm SDK) or the onConfigure method (C++ Proxy-Wasm
     SDK).

     At most one of these can be specified:

       --plugin-config=PLUGIN_CONFIG
          Plugin runtime configuration in the textual format.

       --plugin-config-file=PATH_TO_FILE
          Path to a local file containing the plugin runtime configuration.

          Use a full or relative path to a local file containing the value of
          plugin_config_file.

       --plugin-config-uri=PLUGIN_CONFIG_URI
          URI of the container image containing the plugin's runtime
          configuration, stored in the Artifact Registry.

GCLOUD WIDE FLAGS
    These flags are available to all commands: --access-token-file, --account,
    --billing-project, --configuration, --flags-file, --flatten, --format,
    --help, --impersonate-service-account, --log-http, --project, --quiet,
    --trace-token, --user-output-enabled, --verbosity.

    Run $ gcloud help for details.

NOTES
    This command is currently in alpha and might change without notice. If this
    command fails with API permission errors despite specifying the correct
    project, you might be trying to access an API with an invitation-only early
    access allowlist. These variants are also available:

        $ gcloud service-extensions wasm-plugins create

        $ gcloud beta service-extensions wasm-plugins create

