NAME
    gcloud alpha developer-connect account-connectors create - create
        accountConnectors

SYNOPSIS
    gcloud alpha developer-connect account-connectors create
        (ACCOUNT_CONNECTOR : --location=LOCATION)
        [--annotations=[ANNOTATIONS,...]] [--async] [--etag=ETAG]
        [--labels=[LABELS,...]] [--request-id=REQUEST_ID] [--validate-only]
        [--provider-oauth-config-scopes=[PROVIDER_OAUTH_CONFIG_SCOPES,...]
          : --provider-oauth-config-system-id=PROVIDER_OAUTH_CONFIG_SYSTEM_ID]
        [GCLOUD_WIDE_FLAG ...]

DESCRIPTION
    (ALPHA) Create an accountConnector

EXAMPLES
    To create the accountConnector, run:

        $ gcloud alpha developer-connect account-connectors create

POSITIONAL ARGUMENTS
     AccountConnector resource - Identifier. The resource name of the
     accountConnector, in the format
     projects/{project}/locations/{location}/accountConnectors/{account_connector_id}.
     The arguments in this group can be used to specify the attributes of this
     resource. (NOTE) Some attributes are not given arguments in this group but
     can be set in other ways.

     To set the project attribute:
      ◆ provide the argument account_connector on the command line with a
        fully specified name;
      ◆ provide the argument --project on the command line;
      ◆ set the property core/project.

     This must be specified.

       ACCOUNT_CONNECTOR
          ID of the accountConnector or fully qualified identifier for the
          accountConnector.

          To set the account_connector attribute:
          ▸ provide the argument account_connector on the command line.

          This positional argument must be specified if any of the other
          arguments in this group are specified.

       --location=LOCATION
          The location id of the accountConnector resource.

          To set the location attribute:
          ▸ provide the argument account_connector on the command line with a
            fully specified name;
          ▸ provide the argument --location on the command line.

FLAGS
     --annotations=[ANNOTATIONS,...]
        Allows users to store small amounts of arbitrary data.

         KEY
            Sets KEY value.

         VALUE
            Sets VALUE value.

        Shorthand Example:

            --annotations=string=string

        JSON Example:

            --annotations='{"string": "string"}'

        File Example:

            --annotations=path_to_file.(yaml|json)

     --async
        Return immediately, without waiting for the operation in progress to
        complete.

     --etag=ETAG
        This checksum is computed by the server based on the value of other
        fields, and may be sent on update and delete requests to ensure the
        client has an up-to-date value before proceeding.

     --labels=[LABELS,...]
        Labels as key value pairs.

         KEY
            Keys must start with a lowercase character and contain only hyphens
            (-), underscores (_), lowercase characters, and numbers.

         VALUE
            Values must contain only hyphens (-), underscores (_), lowercase
            characters, and numbers.

        Shorthand Example:

            --labels=string=string

        JSON Example:

            --labels='{"string": "string"}'

        File Example:

            --labels=path_to_file.(yaml|json)

     --request-id=REQUEST_ID
        An optional request ID to identify requests. Specify a unique request
        ID so that if you must retry your request, the server will know to
        ignore the request if it has already been completed. The server will
        guarantee that for at least 60 minutes since the first request.

        For example, consider a situation where you make an initial request and
        the request times out. If you make the request again with the same
        request ID, the server can check if original operation with the same
        request ID was received, and if so, will ignore the second request.
        This prevents clients from accidentally creating duplicate commitments.

        The request ID must be a valid UUID with the exception that zero UUID
        is not supported (00000000-0000-0000-0000-000000000000).

     --validate-only
        If set, validate the request, but do not actually post it.

     Arguments for the account connector config.

       ProviderOAuthConfig is the OAuth config for a provider.

         --provider-oauth-config-scopes=[PROVIDER_OAUTH_CONFIG_SCOPES,...]
            User selected scopes to apply to the Oauth config In the event of
            changing scopes, user records under AccountConnector will be
            deleted and users will re-auth again.

            This flag argument must be specified if any of the other arguments
            in this group are specified.

         Arguments for the oauth provider id.

           --provider-oauth-config-system-id=PROVIDER_OAUTH_CONFIG_SYSTEM_ID
              Developer Connect provided OAuth. PROVIDER_OAUTH_CONFIG_SYSTEM_ID
              must be one of:

               datastax
                  Datastax provider. No scopes are allowed.
               dynatrace
                  Dynatrace provider.
               github
                  GitHub provider. Scopes can be found at
                  https://docs.github.com/en/apps/oauth-apps/building-oauth-apps/scopes-for-oauth-apps#available-scopes
               gitlab
                  GitLab provider. Scopes can be found at
                  https://docs.gitlab.com/user/profile/personal_access_tokens/#personal-access-token-scopes
               google
                  Google provider. Recommended scopes:
                  "https://www.googleapis.com/auth/drive.readonly",
                  "https://www.googleapis.com/auth/documents.readonly"
               new-relic
                  New Relic provider. No scopes are allowed.
               rovo
                  Rovo provider. Must select the "rovo" scope.
               sentry
                  Sentry provider. Scopes can be found at
                  https://docs.sentry.io/api/permissions/

GCLOUD WIDE FLAGS
    These flags are available to all commands: --access-token-file, --account,
    --billing-project, --configuration, --flags-file, --flatten, --format,
    --help, --impersonate-service-account, --log-http, --project, --quiet,
    --trace-token, --user-output-enabled, --verbosity.

    Run $ gcloud help for details.

API REFERENCE
    This command uses the developerconnect/v1 API. The full documentation for
    this API can be found at:
    http://cloud.google.com/developer-connect/docs/overview

NOTES
    This command is currently in alpha and might change without notice. If this
    command fails with API permission errors despite specifying the correct
    project, you might be trying to access an API with an invitation-only early
    access allowlist.

