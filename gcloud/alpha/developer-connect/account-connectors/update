NAME
    gcloud alpha developer-connect account-connectors update - update
        accountConnectors

SYNOPSIS
    gcloud alpha developer-connect account-connectors update
        (ACCOUNT_CONNECTOR : --location=LOCATION) [--[no-]allow-missing]
        [--async] [--etag=ETAG] [--request-id=REQUEST_ID]
        [--[no-]validate-only]
        [--annotations=[ANNOTATIONS,...]
          | --update-annotations=[UPDATE_ANNOTATIONS,...] --clear-annotations
          | --remove-annotations=REMOVE_ANNOTATIONS]
        [--clear-provider-oauth-config
          --provider-oauth-config-scopes=[PROVIDER_OAUTH_CONFIG_SCOPES,...]]
        [--labels=[LABELS,...]
          | --update-labels=[UPDATE_LABELS,...] --clear-labels
          | --remove-labels=REMOVE_LABELS] [GCLOUD_WIDE_FLAG ...]

DESCRIPTION
    (ALPHA) Update an accountConnector

EXAMPLES
    To update the accountConnector, run:

        $ gcloud alpha developer-connect account-connectors update

POSITIONAL ARGUMENTS
     AccountConnector resource - Identifier. The resource name of the
     accountConnector, in the format
     projects/{project}/locations/{location}/accountConnectors/{account_connector_id}.
     The arguments in this group can be used to specify the attributes of this
     resource. (NOTE) Some attributes are not given arguments in this group but
     can be set in other ways.

     To set the project attribute:
      ◆ provide the argument account_connector on the command line with a
        fully specified name;
      ◆ provide the argument --project on the command line;
      ◆ set the property core/project.

     This must be specified.

       ACCOUNT_CONNECTOR
          ID of the accountConnector or fully qualified identifier for the
          accountConnector.

          To set the account_connector attribute:
          ▸ provide the argument account_connector on the command line.

          This positional argument must be specified if any of the other
          arguments in this group are specified.

       --location=LOCATION
          The location id of the accountConnector resource.

          To set the location attribute:
          ▸ provide the argument account_connector on the command line with a
            fully specified name;
          ▸ provide the argument --location on the command line.

FLAGS
     --[no-]allow-missing
        If set to true, and the accountConnector is not found a new
        accountConnector will be created. In this situation update_mask is
        ignored. The creation will succeed only if the input accountConnector
        has all the necessary. Use --allow-missing to enable and
        --no-allow-missing to disable.

     --async
        Return immediately, without waiting for the operation in progress to
        complete.

     --etag=ETAG
        This checksum is computed by the server based on the value of other
        fields, and may be sent on update and delete requests to ensure the
        client has an up-to-date value before proceeding.

     --request-id=REQUEST_ID
        An optional request ID to identify requests. Specify a unique request
        ID so that if you must retry your request, the server will know to
        ignore the request if it has already been completed. The server will
        guarantee that for at least 60 minutes since the first request.

        For example, consider a situation where you make an initial request and
        the request times out. If you make the request again with the same
        request ID, the server can check if original operation with the same
        request ID was received, and if so, will ignore the second request.
        This prevents clients from accidentally creating duplicate commitments.

        The request ID must be a valid UUID with the exception that zero UUID
        is not supported (00000000-0000-0000-0000-000000000000).

     --[no-]validate-only
        If set, validate the request, but do not actually post it. Use
        --validate-only to enable and --no-validate-only to disable.

     Update annotations.

     At most one of these can be specified:

       --annotations=[ANNOTATIONS,...]
          Set annotations to new value. Allows users to store small amounts of
          arbitrary data.

           KEY
              Sets KEY value.

           VALUE
              Sets VALUE value.

          Shorthand Example:

              --annotations=string=string

          JSON Example:

              --annotations='{"string": "string"}'

          File Example:

              --annotations=path_to_file.(yaml|json)

       --update-annotations=[UPDATE_ANNOTATIONS,...]
          Update annotations value or add key value pair. Allows users to store
          small amounts of arbitrary data.

           KEY
              Sets KEY value.

           VALUE
              Sets VALUE value.

          Shorthand Example:

              --update-annotations=string=string

          JSON Example:

              --update-annotations='{"string": "string"}'

          File Example:

              --update-annotations=path_to_file.(yaml|json)

       At most one of these can be specified:

         --clear-annotations
            Clear annotations value and set to empty map.

         --remove-annotations=REMOVE_ANNOTATIONS
            Remove existing value from map annotations. Sets remove_annotations
            value.

            Shorthand Example:

                --remove-annotations=string,string

            JSON Example:

                --remove-annotations=["string"]

            File Example:

                --remove-annotations=path_to_file.(yaml|json)

     Arguments for the account connector config.

       ProviderOAuthConfig is the OAuth config for a provider.

         --clear-provider-oauth-config
            Set accountConnector.providerOauthConfig back to default value.

         --provider-oauth-config-scopes=[PROVIDER_OAUTH_CONFIG_SCOPES,...]
            User selected scopes to apply to the Oauth config In the event of
            changing scopes, user records under AccountConnector will be
            deleted and users will re-auth again.

     Update labels.

     At most one of these can be specified:

       --labels=[LABELS,...]
          Set labels to new value. Labels as key value pairs.

           KEY
              Keys must start with a lowercase character and contain only
              hyphens (-), underscores (_), lowercase characters, and numbers.

           VALUE
              Values must contain only hyphens (-), underscores (_), lowercase
              characters, and numbers.

          Shorthand Example:

              --labels=string=string

          JSON Example:

              --labels='{"string": "string"}'

          File Example:

              --labels=path_to_file.(yaml|json)

       --update-labels=[UPDATE_LABELS,...]
          Update labels value or add key value pair. Labels as key value pairs.

           KEY
              Keys must start with a lowercase character and contain only
              hyphens (-), underscores (_), lowercase characters, and numbers.

           VALUE
              Values must contain only hyphens (-), underscores (_), lowercase
              characters, and numbers.

          Shorthand Example:

              --update-labels=string=string

          JSON Example:

              --update-labels='{"string": "string"}'

          File Example:

              --update-labels=path_to_file.(yaml|json)

       At most one of these can be specified:

         --clear-labels
            Clear labels value and set to empty map.

         --remove-labels=REMOVE_LABELS
            Remove existing value from map labels. Sets remove_labels value.

            Shorthand Example:

                --remove-labels=string,string

            JSON Example:

                --remove-labels=["string"]

            File Example:

                --remove-labels=path_to_file.(yaml|json)

GCLOUD WIDE FLAGS
    These flags are available to all commands: --access-token-file, --account,
    --billing-project, --configuration, --flags-file, --flatten, --format,
    --help, --impersonate-service-account, --log-http, --project, --quiet,
    --trace-token, --user-output-enabled, --verbosity.

    Run $ gcloud help for details.

API REFERENCE
    This command uses the developerconnect/v1 API. The full documentation for
    this API can be found at:
    http://cloud.google.com/developer-connect/docs/overview

NOTES
    This command is currently in alpha and might change without notice. If this
    command fails with API permission errors despite specifying the correct
    project, you might be trying to access an API with an invitation-only early
    access allowlist.

