NAME
    gcloud beta saas-runtime unit-kinds create - create a Unit Kind

SYNOPSIS
    gcloud beta saas-runtime unit-kinds create UNIT_KIND --saas=SAAS
        [--default-release=DEFAULT_RELEASE]
        [--dependencies=[alias=ALIAS],[unitKind=UNITKIND]]
        [--input-variable-mappings=[from=FROM],[to=TO],[variable=VARIABLE]]
        [--labels=[LABELS,...]] [--location=LOCATION]
        [--output-variable-mappings=[from=FROM],[to=TO],[variable=VARIABLE]]
        [GCLOUD_WIDE_FLAG ...]

DESCRIPTION
    (BETA) Create a Unit Kind

EXAMPLES
    To create the Unit Kind, run:

        $ gcloud beta saas-runtime unit-kinds create

POSITIONAL ARGUMENTS
     UnitKind resource - Identifier. The resource name (full URI of the
     resource) following the standard naming scheme:

         "projects/{project}/locations/{location}/unitKinds/{unitKind}" This represents a Cloud resource. (NOTE) Some attributes are not given arguments in this group but can be set in other ways.

     To set the project attribute:
      ◆ provide the argument unit_kind on the command line with a fully
        specified name;
      ◆ provide the argument --project on the command line;
      ◆ set the property core/project.

     To set the location attribute:
      ◆ provide the argument unit_kind on the command line with a fully
        specified name;
      ◆ provide the argument --location on the command line.

     This must be specified.

       UNIT_KIND
          ID of the unitKind or fully qualified identifier for the unitKind.

          To set the unit_kind attribute:
          ▸ provide the argument unit_kind on the command line.

REQUIRED FLAGS
     Saas resource - A reference to the Saas that defines the product (managed
     service) that the producer wants to manage with Saas Runtime. Immutable
     once set. This represents a Cloud resource. (NOTE) Some attributes are not
     given arguments in this group but can be set in other ways.

     To set the project attribute:
      ◆ provide the argument --saas on the command line with a fully
        specified name;
      ◆ provide the argument --project on the command line;
      ◆ set the property core/project.

     To set the location attribute:
      ◆ provide the argument --saas on the command line with a fully
        specified name;
      ◆ provide the argument --location on the command line.

     This must be specified.

       --saas=SAAS
          ID of the saas or fully qualified identifier for the saas.

          To set the saas attribute:
          ▸ provide the argument --saas on the command line.

OPTIONAL FLAGS
     Release resource - A reference to the Release object to use as default for
     creating new units of this Unit Kind (optional).

     If not specified, a new unit must explicitly reference which release to
     use for its creation. This represents a Cloud resource. (NOTE) Some
     attributes are not given arguments in this group but can be set in other
     ways.

     To set the project attribute:
      ◆ provide the argument --default-release on the command line with a
        fully specified name;
      ◆ provide the argument --project on the command line;
      ◆ set the property core/project.

     To set the location attribute:
      ◆ provide the argument --default-release on the command line with a
        fully specified name;
      ◆ provide the argument --location on the command line.

       --default-release=DEFAULT_RELEASE
          ID of the release or fully qualified identifier for the release.

          To set the release attribute:
          ▸ provide the argument --default-release on the command line.

     --dependencies=[alias=ALIAS],[unitKind=UNITKIND]
        List of other unit kinds that this release will depend on. Dependencies
        will be automatically provisioned if not found. Maximum 10.

         alias
            An alias for the dependency. Used for input variable mapping.

         unitKind
            The unit kind of the dependency.

        Shorthand Example:

            --dependencies=alias=string,unitKind=string --dependencies=alias=string,unitKind=string

        JSON Example:

            --dependencies='[{"alias": "string", "unitKind": "string"}]'

        File Example:

            --dependencies=path_to_file.(yaml|json)

     --input-variable-mappings=[from=FROM],[to=TO],[variable=VARIABLE]
        List of inputVariables for this release that will either be retrieved
        from a dependency's outputVariables, or will be passed on to a
        dependency's inputVariables. Maximum 100.

         from
            Output variables which will get their values from dependencies.

             dependency
                Alias of the dependency that the outputVariable will pass its
                value to.

             outputVariable
                Name of the outputVariable on the dependency.

         to
            Input variables whose values will be passed on to dependencies.

             dependency
                Alias of the dependency that the inputVariable will pass its
                value to.

             ignoreForLookup
                Indicates if this mapping should be used during lookup or not.

             inputVariable
                Name of the inputVariable on the dependency.

         variable
            name of the variable.

        Shorthand Example:

            --input-variable-mappings=from={dependency=string,outputVariable=string},to={dependency=string,ignoreForLookup=boolean,inputVariable=string},variable=string --input-variable-mappings=from={dependency=string,outputVariable=string},to={dependency=string,ignoreForLookup=boolean,inputVariable=string},variable=string

        JSON Example:

            --input-variable-mappings='[{"from": {"dependency": "string", "outputVariable": "string"}, "to": {"dependency": "string", "ignoreForLookup": boolean, "inputVariable": "string"}, "variable": "string"}]'

        File Example:

            --input-variable-mappings=path_to_file.(yaml|json)

     --labels=[LABELS,...]
        The labels on the resource, which can be used for categorization.
        similar to Kubernetes resource labels.

         KEY
            Keys must start with a lowercase character and contain only hyphens
            (-), underscores (_), lowercase characters, and numbers.

         VALUE
            Values must contain only hyphens (-), underscores (_), lowercase
            characters, and numbers.

        Shorthand Example:

            --labels=string=string

        JSON Example:

            --labels='{"string": "string"}'

        File Example:

            --labels=path_to_file.(yaml|json)

     --location=LOCATION
        For resources [unitKind, release, saas], provides fallback value for
        resource location attribute. When the resource's full URI path is not
        provided, location will fallback to this flag value.

     --output-variable-mappings=[from=FROM],[to=TO],[variable=VARIABLE]
        List of inputVariables for this release that will either be retrieved
        from a dependency's outputVariables, or will be passed on to a
        dependency's inputVariables. Maximum 100.

         from
            Output variables which will get their values from dependencies.

             dependency
                Alias of the dependency that the outputVariable will pass its
                value to.

             outputVariable
                Name of the outputVariable on the dependency.

         to
            Input variables whose values will be passed on to dependencies.

             dependency
                Alias of the dependency that the inputVariable will pass its
                value to.

             ignoreForLookup
                Indicates if this mapping should be used during lookup or not.

             inputVariable
                Name of the inputVariable on the dependency.

         variable
            name of the variable.

        Shorthand Example:

            --output-variable-mappings=from={dependency=string,outputVariable=string},to={dependency=string,ignoreForLookup=boolean,inputVariable=string},variable=string --output-variable-mappings=from={dependency=string,outputVariable=string},to={dependency=string,ignoreForLookup=boolean,inputVariable=string},variable=string

        JSON Example:

            --output-variable-mappings='[{"from": {"dependency": "string", "outputVariable": "string"}, "to": {"dependency": "string", "ignoreForLookup": boolean, "inputVariable": "string"}, "variable": "string"}]'

        File Example:

            --output-variable-mappings=path_to_file.(yaml|json)

GCLOUD WIDE FLAGS
    These flags are available to all commands: --access-token-file, --account,
    --billing-project, --configuration, --flags-file, --flatten, --format,
    --help, --impersonate-service-account, --log-http, --project, --quiet,
    --trace-token, --user-output-enabled, --verbosity.

    Run $ gcloud help for details.

API REFERENCE
    This command uses the saasservicemgmt/v1beta1 API. The full documentation
    for this API can be found at: https://cloud.google.com/

NOTES
    This command is currently in beta and might change without notice.

