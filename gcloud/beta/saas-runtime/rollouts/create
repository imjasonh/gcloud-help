NAME
    gcloud beta saas-runtime rollouts create - create a Rollout

SYNOPSIS
    gcloud beta saas-runtime rollouts create ROLLOUT --release=RELEASE
        [--labels=[LABELS,...]] [--location=LOCATION]
        [--rollout-kind=ROLLOUT_KIND]
        [--rollout-orchestration-strategy=ROLLOUT_ORCHESTRATION_STRATEGY]
        [--unit-filter=UNIT_FILTER]
        [--control-action=CONTROL_ACTION : --[no-]retry-failed-operations]
        [GCLOUD_WIDE_FLAG ...]

DESCRIPTION
    (BETA) Create a Rollout

EXAMPLES
    To create the Rollout, run:

        $ gcloud beta saas-runtime rollouts create

POSITIONAL ARGUMENTS
     RolloutId resource - Identifier. The resource name (full URI of the
     resource) following the standard naming scheme:

         "projects/{project}/locations/{location}/rollout/{rollout_id}" This represents a Cloud resource. (NOTE) Some attributes are not given arguments in this group but can be set in other ways.

     To set the project attribute:
      ◆ provide the argument rollout on the command line with a fully
        specified name;
      ◆ provide the argument --project on the command line;
      ◆ set the property core/project.

     To set the location attribute:
      ◆ provide the argument rollout on the command line with a fully
        specified name;
      ◆ provide the argument --location on the command line.

     This must be specified.

       ROLLOUT
          ID of the rolloutId or fully qualified identifier for the rolloutId.

          To set the rollout attribute:
          ▸ provide the argument rollout on the command line.

REQUIRED FLAGS
     --release=RELEASE
        ID of the release or fully qualified identifier for the release.

        To set the release attribute:
        ◆ provide the argument --release on the command line.

OPTIONAL FLAGS
     --labels=[LABELS,...]
        The labels on the resource, which can be used for categorization.
        similar to Kubernetes resource labels.

         KEY
            Keys must start with a lowercase character and contain only hyphens
            (-), underscores (_), lowercase characters, and numbers.

         VALUE
            Values must contain only hyphens (-), underscores (_), lowercase
            characters, and numbers.

        Shorthand Example:

            --labels=string=string

        JSON Example:

            --labels='{"string": "string"}'

        File Example:

            --labels=path_to_file.(yaml|json)

     --location=LOCATION
        For resources [rolloutId, release, rolloutKindId], provides fallback
        value for resource location attribute. When the resource's full URI
        path is not provided, location will fallback to this flag value.

     RolloutKindId resource - Name of the RolloutKind this rollout is stemming
     from and adhering to. This represents a Cloud resource. (NOTE) Some
     attributes are not given arguments in this group but can be set in other
     ways.

     To set the project attribute:
      ◆ provide the argument --rollout-kind on the command line with a fully
        specified name;
      ◆ provide the argument --project on the command line;
      ◆ set the property core/project.

     To set the location attribute:
      ◆ provide the argument --rollout-kind on the command line with a fully
        specified name;
      ◆ provide the argument --location on the command line.

       --rollout-kind=ROLLOUT_KIND
          ID of the rolloutKindId or fully qualified identifier for the
          rolloutKindId.

          To set the rollout-kind attribute:
          ▸ provide the argument --rollout-kind on the command line.

     --rollout-orchestration-strategy=ROLLOUT_ORCHESTRATION_STRATEGY
        The strategy to use for executing this rollout. If not provided, the
        strategy from Rollout Type will be used.

     --unit-filter=UNIT_FILTER
        CEL(https://github.com/google/cel-spec) formatted filter string against
        Unit. The filter will be applied to determine the eligible unit
        population. This filter can only reduce, but not expand the scope of
        the rollout. If not provided, the unit_filter from the RolloutType will
        be used.

     RolloutControl provides a way to request a change to the execution of a
     Rollout by pausing or canceling it.

       --control-action=CONTROL_ACTION
          Action to be performed on the Rollout. The default behavior is to run
          the rollout until it naturally reaches a terminal state.
          CONTROL_ACTION must be one of:

           cancel
              Cancel the Rollout permanently.
           pause
              Pause the Rollout until it is resumed (i.e. RUN is requested).
           run
              Run the Rollout until it naturally reaches a terminal state. A
              rollout requested to run will progress through all natural
              Rollout States (such as RUNNING -> SUCCEEDED or RUNNING ->
              FAILED). If retriable errors are encountered during the rollout,
              the rollout will paused by default and can be resumed by
              re-requesting this RUN action.

          This flag argument must be specified if any of the other arguments in
          this group are specified.

       Arguments for the action params.

         Parameters for the RUN action controlling the behavior of the rollout
         when it is resumed from a PAUSED state.

           --[no-]retry-failed-operations
              If true, the rollout will retry failed operations when resumed.
              This is applicable only the current state of the Rollout is
              PAUSED and the requested action is RUN. Use
              --retry-failed-operations to enable and
              --no-retry-failed-operations to disable.

GCLOUD WIDE FLAGS
    These flags are available to all commands: --access-token-file, --account,
    --billing-project, --configuration, --flags-file, --flatten, --format,
    --help, --impersonate-service-account, --log-http, --project, --quiet,
    --trace-token, --user-output-enabled, --verbosity.

    Run $ gcloud help for details.

API REFERENCE
    This command uses the saasservicemgmt/v1beta1 API. The full documentation
    for this API can be found at: https://cloud.google.com/

NOTES
    This command is currently in beta and might change without notice.

